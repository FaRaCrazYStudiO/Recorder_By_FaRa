import sys
import cv2
import numpy as np
import pyautogui
import os
from PyQt5 import QtWidgets, QtCore

# Default settings
DEFAULT_VIDEO_RESOLUTION = (1920, 1080)  # Video resolution
DEFAULT_OUTPUT_DIR = os.path.expanduser("~")  # Default output directory

# Локализация
LANGUAGES = {
    'en': {
        'settings_title': "Settings",
        'output_directory': "Output Directory:",
        'browse': "Browse",
        'audio_sample_rate': "Audio Sample Rate:",
        'video_resolution': "Video Resolution (Width x Height):",
        'save': "Save",
        'record': "▷",
        'stop': "□",
        'pause': "⏸️",
        'settings': "⚙️",
        'countdown_text': "{}",
        'pause_resume': "▶️",
        'resume': "⏸️"
    },
    'ru': {
        'settings_title': "Настройки",
        'output_directory': "Директория для сохранения:",
        'browse': "Обзор",
        'audio_sample_rate': "Частота дискретизации аудио:",
        'video_resolution': "Разрешение видео (Ширина x Высота):",
        'save': "Сохранить",
        'record': "▷",
        'stop': "□",
        'pause': "⏸️",
        'settings': "⚙️",
        'countdown_text': "{}",
        'pause_resume': "▶️",
        'resume': "⏸️"
    },
    # Испанский и немецкий языки
    'es': {
        'settings_title': "Configuraciones",
        'output_directory': "Directorio de salida:",
        'browse': "Buscar",
        'audio_sample_rate': "Tasa de muestreo de audio:",
        'video_resolution': "Resolución de Video (Ancho x Alto):",
        'save': "Guardar",
        'record': "▷",
        'stop': "□",
        'pause': "⏸️",
        'settings': "⚙️",
        'countdown_text': "{}",
        'pause_resume': "▶️",
        'resume': "⏸️"
    },
    'de': {
        'settings_title': "Einstellungen",
        'output_directory': "Ausgabeverzeichnis:",
        'browse': "Durchsuchen",
        'audio_sample_rate': "Audio-Abtastrate:",
        'video_resolution': "Videoauflösung (Breite x Höhe):",
        'save': "Speichern",
        'record': "▷",
        'stop': "□",
        'pause': "⏸️",
        'settings': "⚙️",
        'countdown_text': "{}",
        'pause_resume': "▶️",
        'resume': "⏸️"
    },
}

class SettingsDialog(QtWidgets.QDialog):
    def __init__(self, language):
        super().__init__()
        self.language = language
        self.setWindowTitle(LANGUAGES[self.language]['settings_title'])
        
        self.layout = QtWidgets.QVBoxLayout()
        
        # Директория для сохранения
        self.output_dir_label = QtWidgets.QLabel(LANGUAGES[self.language]['output_directory'])
        self.output_dir_input = QtWidgets.QLineEdit(DEFAULT_OUTPUT_DIR)
        self.browse_button = QtWidgets.QPushButton(LANGUAGES[self.language]['browse'])
        self.browse_button.clicked.connect(self.browse_output_directory)
        
        self.layout.addWidget(self.output_dir_label)
        self.layout.addWidget(self.output_dir_input)
        self.layout.addWidget(self.browse_button)

        # Разрешение видео
        self.video_res_label = QtWidgets.QLabel(LANGUAGES[self.language]['video_resolution'])
        self.video_width_input = QtWidgets.QSpinBox()
        self.video_height_input = QtWidgets.QSpinBox()
        self.video_width_input.setValue(DEFAULT_VIDEO_RESOLUTION[0])
        self.video_height_input.setValue(DEFAULT_VIDEO_RESOLUTION[1])
        
        width_layout = QtWidgets.QHBoxLayout()
        width_layout.addWidget(self.video_width_input)
        width_layout.addWidget(QtWidgets.QLabel("x"))
        width_layout.addWidget(self.video_height_input)
        
        self.layout.addWidget(self.video_res_label)
        self.layout.addLayout(width_layout)

        # Язык
        self.language_label = QtWidgets.QLabel("Language:")
        self.language_combobox = QtWidgets.QComboBox()
        self.language_combobox.addItems(list(LANGUAGES.keys()))
        self.language_combobox.setCurrentText(self.language)
        self.language_combobox.currentTextChanged.connect(self.update_language)
        
        self.layout.addWidget(self.language_label)
        self.layout.addWidget(self.language_combobox)

        self.save_button = QtWidgets.QPushButton(LANGUAGES[self.language]['save'])
        self.save_button.clicked.connect(self.accept)
        self.layout.addWidget(self.save_button)

        self.setLayout(self.layout)

    def browse_output_directory(self):
        folder = QtWidgets.QFileDialog.getExistingDirectory(self, "Select Output Directory")
        if folder:
            self.output_dir_input.setText(folder)

    def get_settings(self):
        return {
            'video_resolution': (self.video_width_input.value(), self.video_height_input.value()),
            'output_dir': self.output_dir_input.text(),
            'language': self.language_combobox.currentText()
        }

    def update_language(self):
        self.language = self.language_combobox.currentText()
        self.setWindowTitle(LANGUAGES[self.language]['settings_title'])
        self.output_dir_label.setText(LANGUAGES[self.language]['output_directory'])
        self.video_res_label.setText(LANGUAGES[self.language]['video_resolution'])
        self.save_button.setText(LANGUAGES[self.language]['save'])
        self.browse_button.setText(LANGUAGES[self.language]['browse'])
        self.language_label.setText("Language:")

class VideoThread(QtCore.QThread):
    def __init__(self, video_filename, video_resolution):
        super().__init__()
        self.video_filename = video_filename
        self.video_resolution = video_resolution
        self.recording = True

    def run(self):
        codec = cv2.VideoWriter_fourcc(*"mp4v")  # Use mp4v codec for mp4 videos
        out = cv2.VideoWriter(self.video_filename, codec, 20.0, self.video_resolution)

        while self.recording:
            img = pyautogui.screenshot()
            frame = np.array(img)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            out.write(frame)
            cv2.waitKey(1)
        out.release()

class RecorderApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.recording_video = False
        self.is_paused = False
        self.video_thread = None
        self.video_filename = os.path.join(DEFAULT_OUTPUT_DIR, "Recording.avi")
        self.video_resolution = DEFAULT_VIDEO_RESOLUTION
        self.language = 'en'  # Default language

        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.setGeometry(100, 100, 200, 50)

        self.init_ui()
        self.show()

    def init_ui(self):
        layout = QtWidgets.QHBoxLayout()

        self.record_button = QtWidgets.QPushButton("▷")
        self.record_button.setStyleSheet("font-size: 20px; color: #6ebf73;")
        self.record_button.clicked.connect(self.toggle_recording)
        layout.addWidget(self.record_button)

        self.stop_button = QtWidgets.QPushButton("□")
        self.stop_button.setStyleSheet("font-size: 20px; color: #6ebf73;")
        self.stop_button.clicked.connect(self.stop_recording)
        self.stop_button.setEnabled(False)
        layout.addWidget(self.stop_button)

        self.pause_button = QtWidgets.QPushButton("⏸️")
        self.pause_button.setStyleSheet("font-size: 20px; color: #6ebf73;")
        self.pause_button.clicked.connect(self.toggle_pause)
        self.pause_button.setEnabled(False)
        layout.addWidget(self.pause_button)

        self.settings_button = QtWidgets.QPushButton("⚙️")
        self.settings_button.clicked.connect(self.open_settings)
        layout.addWidget(self.settings_button)

        self.setLayout(layout)

    def open_settings(self):
        settings_dialog = SettingsDialog(self.language)
        if settings_dialog.exec_():
            settings = settings_dialog.get_settings()
            self.video_resolution = settings['video_resolution']
            self.video_filename = os.path.join(settings['output_dir'], "Recording.avi")
            self.language = settings['language']  # Save selected language

    def record_video(self):
        self.video_thread = VideoThread(self.video_filename, self.video_resolution)
        self.video_thread.start()

    def toggle_recording(self):
        if not self.recording_video:
            self.recording_video = True
            self.record_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.pause_button.setEnabled(True)

            self.record_video()
        else:
            self.stop_recording()

    def stop_recording(self):
        self.recording_video = False
        self.record_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.pause_button.setEnabled(False)

        if self.video_thread is not None:
            self.video_thread.recording = False  # Stop video thread
            self.video_thread.quit()
            self.video_thread.wait()  # Wait for the thread to finish

    def toggle_pause(self):
        self.is_paused = not self.is_paused
        self.pause_button.setText("▶️" if self.is_paused else "⏸️")  # Change button text

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    recorder = RecorderApp()
    sys.exit(app.exec_())
